/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* find_right(TreeNode* root){
        while(root->right!=NULL)
            root = root->right;
        return root;
    }
    TreeNode* del(TreeNode* root){
        if(root->right==NULL)
            return root->left;
        if(root->left==NULL)
            return root->right;
        TreeNode* r = root->right;
        TreeNode* l = find_right(root->left);
        l->right = r;
        return root->left;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)
            return NULL;
        if(root->val == key){
            return del(root);
        }
        TreeNode* cur = root;
        while(cur!=NULL){
            if(cur->val > key){
                if(cur->left!=NULL && cur->left->val == key){
                    cur->left = del(cur->left);
                    break;
                }
                else
                    cur = cur->left;
            }
            else{
                if(cur->right!=NULL && cur->right->val == key){
                    cur->right = del(cur->right);
                    break;
                }
                else
                    cur = cur->right;
            }
        }
        return root;
    }
};