struct node{
    bool BST;
    int count;
    int mini;
    int maxi;
    node(bool _BST, int _count,int _min, int _max){
        BST =_BST;
        count = _count;
        mini = _min;
        maxi = _max;
    }
};
class Solution{
    public:
    node *f(Node* root){
        //null node
        if(root==NULL){
            node *n = new node(1,0,INT_MAX,INT_MIN);
            return n;
        }
        //leaf node
        if(root->left==NULL && root->right==NULL){
            node *n = new node(1,1,root->data,root->data);
            return n;
        }
        node *left = f(root->left);
        node *right = f(root->right);
        if(left->BST==1 && right->BST==1){
            if(root->data > left->maxi && root->data < right->mini){
                int x = (left->mini==INT_MAX)?root->data:left->mini;
                int y = (right->maxi==INT_MIN)?root->data:right->maxi;
                int sum = left->count + right->count + 1;
                node *n = new node(1,sum,x,y);
                return n;
            }
        }
        node *n = new node(0,max(left->count,right->count),0,0);
        return n;
    }
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	//Your code here
    	node *n = f(root);
    	return n->count;
    }
};