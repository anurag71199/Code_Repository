/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>ans;
        if(root==NULL || target == NULL)
            return ans;
        if(k==0)
            return {target->val};
        map<TreeNode*,TreeNode*>mp; //{child,parent}
        set<TreeNode*>visited;
        //create parent map
        mp[root] = NULL;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node->left!=NULL){
                mp[node->left] = node;
                q.push(node->left);
            }
            if(node->right!=NULL){
                mp[node->right] = node;
                q.push(node->right);
            }
        }
        //start from the target node and move up,left and right while 
        //updating distance
        int dist = 0;
        q.push(target);
        while(!q.empty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();
                visited.insert(node);
                //check up
                if(mp[node]!=NULL && (visited.find(mp[node]) == visited.end())){
                    q.push(mp[node]);
                }
                //check left
                if(node->left!=NULL && (visited.find(node->left) == visited.end())){
                    q.push(node->left);
                }
                //check right
                if(node->right!=NULL && (visited.find(node->right) == visited.end()) )               {
                    q.push(node->right);
                }
            }
            dist += 1;
            if(dist==k){
                break;
            }
        }
        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }
};