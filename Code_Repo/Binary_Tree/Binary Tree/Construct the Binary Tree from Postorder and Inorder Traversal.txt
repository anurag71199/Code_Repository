/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* make_tree(vector<int>&inorder, int in_beg, int in_end, vector<int>&postorder, int post_beg, int post_end, map<int,int>&mp){
        if(in_beg>in_end || post_beg>post_end){
            return NULL;
        }
        TreeNode* root = new TreeNode(postorder[post_end]);
        int idx = mp[postorder[post_end]];
        int nums_left = idx - in_beg;
        root->left = make_tree(inorder,in_beg,idx-1,postorder,post_beg,post_beg+nums_left-1,mp);
        root->right = make_tree(inorder,idx+1,in_end,postorder,post_beg+nums_left,post_end-1,mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>mp; //{node val,idx}
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]] = i;
        }
        return make_tree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mp);
    }
};