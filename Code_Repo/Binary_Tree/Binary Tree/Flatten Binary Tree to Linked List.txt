/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* prev;
public:
    Solution(){
        prev = NULL;
    }
    void flatten(TreeNode* root) {
        //Method using morris traversal technique
        if(root==NULL)
            return;
        TreeNode* cur = root;
        while(cur!=NULL){
            if(cur->left!=NULL){
                TreeNode* temp = cur->left;
                while(temp->right!=NULL){
                    temp=temp->right;
                }
                temp->right = cur->right;
                cur->right = cur->left;
                cur->left = NULL;
            }
            cur=cur->right;
        }
        return;

        //Method using Stack
        // if(root==NULL)
        //     return;
        // stack<TreeNode*>st;
        // st.push(root);
        // while(!st.empty()){
        //     TreeNode* cur = st.top();
        //     st.pop();
        //     if(cur->right!=NULL)
        //         st.push(cur->right);
        //     if(cur->left!=NULL)
        //         st.push(cur->left);
        //     if(!st.empty())
        //         cur->right = st.top();
        //     cur->left = NULL;
        // }
        // return;


        //Recursive Method
        // if(root==NULL)
        //     return;
        // flatten(root->right);
        // flatten(root->left);
        // root->right = prev;
        // root->left = NULL;
        // prev = root;
        // return;
    }
};