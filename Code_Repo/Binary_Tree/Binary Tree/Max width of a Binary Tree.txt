/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        queue<pair<TreeNode*,double>>q; // {node,level}
        int width = 0;
        q.push({root,0});
        while(!q.empty()){
            int size = q.size(); //level size
            double mini = q.front().second;
            int first,last;
            for(int i=0;i<size;i++){
                TreeNode *node = q.front().first;
                double new_i = q.front().second - mini;
                q.pop();
                if(i==0) //first node leftest
                    first = new_i;
                if(i==size-1) //last node rightest
                    last = new_i;
                if(node->left!=NULL) q.push({node->left,new_i*2+1});
                if(node->right!=NULL) q.push({node->right,new_i*2+2});
            }
            width = max(width,last-first+1);
        }
        return width;
    }
};