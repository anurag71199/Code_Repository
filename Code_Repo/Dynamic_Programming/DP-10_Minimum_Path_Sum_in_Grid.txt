class Solution {
public:
    int memoize(int i, int j, int n, int m, vector<vector<int>>&grid,vector<vector<int>>&dp){
        if(i==n || j==m){
            return INT_MAX;
        }
        if(i==n-1 && j==m-1){
            return grid[i][j];
        }
        if(dp[i][j] != -1)
            return dp[i][j];
        int right = memoize(i,j+1,n,m,grid,dp);
        int down = memoize(i+1,j,n,m,grid,dp);
        return dp[i][j] = min(right,down) + grid[i][j];
    }

    int tabulate(int n, int m,vector<vector<int>>&grid){
        vector<vector<int>>dp(n,vector<int>(m,0));
        dp[n-1][m-1] = grid[n-1][m-1];
        int right,down;
        for(int i=n-1;i>=0;i--){
            right = down = INT_MAX;
            for(int j=m-1;j>=0;j--){
                if(i==n-1 && j==m-1)
                    continue;
                if(i+1<n)
                    down = dp[i+1][j];
                if(j+1<m)
                    right = dp[i][j+1];
                dp[i][j] = min(right,down) + grid[i][j];
            }
        }
        return dp[0][0];
    }

    int so(int n, int m, vector<vector<int>>&grid){
        vector<int>dp(m,INT_MAX);
        dp[m-1] = grid[n-1][m-1];
        int down,right;
        for(int i=n-1;i>=0;i--){
            vector<int>temp(m,0);
            down = right = INT_MAX;
            for(int j=m-1;j>=0;j--){
                if(i==n-1 && j==m-1){
                    temp[j] = dp[j];
                    continue;
                }
                down = dp[j];
                if(j+1<m)
                    right = temp[j+1];
                temp[j] = min(down,right) + grid[i][j];
            }
            dp = temp;
        }
        return dp[0];
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        // vector<vector<int>>dp(n,vector<int>(m,-1));
        // return memoize(0,0,n,m,grid,dp);
        // return tabulate(n,m,grid);
        return so(n,m,grid);
    }
};
