class Solution {
public:
    int memoize(int i, int j1, int j2, int n, int m, vector<vector<int>>&grid, vector<vector<vector<int>>>&dp){
        if(j1<0 || j1==m || j2<0 || j2 == m)
            return -1e8;
        if(i==n-1){
            if(j1 == j2)
                return grid[i][j1];
            else
                return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2] != -1)
            return dp[i][j1][j2];
        int maxi = -1e8;
        for(int dj1=-1;dj1<=1;dj1++){
            for(int dj2=-1;dj2<=1;dj2++){
                if(j1 == j2){
                    maxi = max(maxi,(grid[i][j1] + memoize(i+1,j1+dj1,j2+dj2,n,m,grid,dp)));
                }
                else{
                    maxi = max(maxi,(grid[i][j1] + grid[i][j2] + memoize(i+1,j1+dj1,j2+dj2,n,m,grid,dp)));
                }
            }
        }
        return dp[i][j1][j2] = maxi;
    }

    int tabulation(int n, int m, vector<vector<int>>&grid){
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,0)));
        //base case initialization
        for(int j1=0;j1<m;j1++){
            for(int j2=0;j2<m;j2++){
                if(j1==j2)
                    dp[n-1][j1][j2] = grid[n-1][j1];
                else
                    dp[n-1][j1][j2] = grid[n-1][j1] + grid[n-1][j2];
            }
        }
        int maxi = -1e8;
        for(int i=n-2;i>=0;i--){
            for(int j1=0;j1<m;j1++){
                for(int j2=0;j2<m;j2++){
                    maxi = -1e8;
                    for(int dj1=-1;dj1<=1;dj1++){
                        for(int dj2=-1;dj2<=1;dj2++){
                            if(j1+dj1<0 || j1+dj1>=m || j2+dj2<0 || j2+dj2>=m)
                                continue;
                            if(j1==j2){
                                maxi = max(maxi,grid[i][j1] + dp[i+1][j1+dj1][j2 + dj2]);
                            }
                            else{
                                maxi = max(maxi,grid[i][j1] + grid[i][j2] + dp[i+1][j1+dj1][j2 + dj2]);
                            }
                        }
                    }
                    dp[i][j1][j2] = maxi;
                }
            }
        }
        return dp[0][0][m-1];
    }

    int so(int n, int m, vector<vector<int>>&grid){
        vector<vector<int>>dp(m,vector<int>(m,0));
        vector<vector<int>>temp(m,vector<int>(m,0));
        //base case initialization
        for(int j1=0;j1<m;j1++){
            for(int j2=0;j2<m;j2++){
                if(j1==j2)
                    dp[j1][j2] = grid[n-1][j1];
                else
                    dp[j1][j2] = grid[n-1][j1] + grid[n-1][j2];
            }
        }
        int maxi = -1e8;
        for(int i=n-2;i>=0;i--){
            for(int j1=0;j1<m;j1++){
                for(int j2=0;j2<m;j2++){
                    maxi = -1e8;
                    for(int dj1=-1;dj1<=1;dj1++){
                        for(int dj2=-1;dj2<=1;dj2++){
                            if(j1+dj1<0 || j1+dj1>=m || j2+dj2<0 || j2+dj2>=m)
                                continue;
                            if(j1==j2){
                                maxi = max(maxi,grid[i][j1] + dp[j1+dj1][j2 + dj2]);
                            }
                            else{
                                maxi = max(maxi,grid[i][j1] + grid[i][j2] + dp[j1+dj1][j2 + dj2]);
                            }
                        }
                    }
                    temp[j1][j2] = maxi;
                }
            }
            dp = temp;
        }
        return dp[0][m-1];
    }

    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        //memoization
        // vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        // return memoize(0,0,m-1,n,m,grid,dp);
        
        //tabulation
        // return tabulation(n,m,grid);

        //space optimization
        return so(n,m,grid);
    }
};
