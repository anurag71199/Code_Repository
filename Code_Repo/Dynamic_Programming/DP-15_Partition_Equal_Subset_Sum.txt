class Solution {
public:
    bool memoize(int n, int target, vector<int>&arr, vector<vector<int>>&dp){
        if(target == 0)
            return true;
        if(n == 0){
            return arr[n] == target;
        }
        if(dp[n][target] != -1)
            return dp[n][target];
        int not_take = memoize(n-1,target,arr,dp);
        if(not_take)
            return true;
        int take = false;
        if(arr[n] <= target){
            take = memoize(n-1,target-arr[n],arr,dp);
            if(take)
                return true;
        }
        return dp[n][target] = false;
    }

    bool tabulate(int n, int target, vector<int>&arr){
        if(n==1)
            return false;
        vector<vector<bool>>dp(n,vector<bool>(target+1,false));
        for(int i=0;i<n;i++)
            dp[i][0] = true;
        if(arr[0] > target)
            return false;
        dp[0][arr[0]] = true;
        for(int i = 1; i<n; i++){
            for(int j = 1; j<=target; j++){
                bool not_take = dp[i-1][j];
                bool take = false;
                if(arr[i] <= j){
                    take = dp[i-1][j-arr[i]];
                }
                dp[i][j] = take | not_take;
            }
        }
        return dp[n-1][target];
    }

    bool so(int n, int target, vector<int>&arr){
        if(n==1)
            return false;
        vector<bool>dp(target+1,false);
        dp[0] = true;
        if(arr[0] > target)
            return false;
        dp[arr[0]] = true;
        for(int i = 1; i<n; i++){
            vector<bool>temp(target+1,false);
            temp[0] = true;
            for(int j = 1; j<=target; j++){
                bool not_take = dp[j];
                bool take = false;
                if(arr[i] <= j){
                    take = dp[j-arr[i]];
                }
                temp[j] = take | not_take;
            }
            dp = temp;
        }
        return dp[target];
    }

    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i : nums){
            sum += i;
        }
        if(sum%2 != 0)
            return false;
        int target = sum/2;

        //memoization
        // vector<vector<int>>dp(n,vector<int>(target+1,-1));
        // return memoize(n-1,target,nums,dp);

        //tabulation
        // return tabulate(n,target,nums);

        //space optimization
        return so(n,target,nums);
    }
};
