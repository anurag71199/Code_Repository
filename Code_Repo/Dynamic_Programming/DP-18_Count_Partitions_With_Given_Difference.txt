#include <bits/stdc++.h> 
int mod = 1e9+7;
int memoization(int i, int n, int target, vector<int>&arr, vector<vector<int>>&dp){
    if(i==n){
        if(target == 0)
            return 1;
        else    
            return 0;
    }
    if(dp[i][target] != -1){
        return dp[i][target];
    }
    int not_take = memoization(i+1,n,target,arr,dp)%mod;
    int take = 0;
    if(arr[i] <= target)
        take = memoization(i+1,n,target-arr[i],arr,dp)%mod;
    return dp[i][target] = (take+not_take)%mod;
}

int tabulate(int n, int target, vector<int>&arr){
    vector<vector<int>>dp(n,vector<int>(target+1,0));
    for(int i=0;i<n;i++)
        dp[i][0] = 1;
    if(arr[0] <= target)
        dp[0][arr[0]] = 1;
    if(arr[0] == 0)
        dp[0][0] = 2;
    
    for(int i=1;i<n;i++){
        for(int j=0;j<=target;j++){
            int not_take = dp[i-1][j]%mod;
            int take = 0;
            if(arr[i] <= j){
                take = dp[i-1][j-arr[i]]%mod;
            }
            dp[i][j] = (take + not_take)%mod;
        }
    }
    return dp[n-1][target]%mod;
}

int so(int n, int target, vector<int>&arr){
    vector<int>dp(target+1,0);
    dp[0] = 1;
    if(arr[0] <= target)
        dp[arr[0]] = 1;
    if(arr[0] == 0)
        dp[0] = 2;
    
    for(int i=1;i<n;i++){
        vector<int>temp(target+1,0);
        temp[0] = 1;
        for(int j=0;j<=target;j++){
            int not_take = dp[j]%mod;
            int take = 0;
            if(arr[i] <= j){
                take = dp[j-arr[i]]%mod;
            }
            temp[j] = (take + not_take)%mod;
        }
        dp = temp;
    }
    return dp[target]%mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int total_sum = 0;
    for(int i : arr){
        total_sum += i;
    }
    if((total_sum-d)%2 != 0 || (total_sum-d)<0){
        return 0;
    }
    int target = (total_sum-d)/2;
    //memoization
    // vector<vector<int>>dp(n,vector<int>(target+1,-1));
    // return memoization(0,n,target,arr,dp);

    //tabulation
    // return tabulate(n,target,arr);

    //space optimization
    return so(n,target,arr);

}



