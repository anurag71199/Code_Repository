class Solution {
public:
    int tabulate(int n, int target, vector<int>&arr){
        vector<vector<int>>dp(n,vector<int>(target+1,0));
        for(int i=0;i<n;i++)
            dp[i][0] = 1;
        if(arr[0] <= target)
            dp[0][arr[0]] = 1;
        if(arr[0] == 0){
            dp[0][0] = 2;
        }
        for(int i = 1; i<n; i++){
            for(int j = 0; j<=target; j++){
                int not_take = dp[i-1][j];
                int take = 0;
                if(arr[i] <= j){
                    take = dp[i-1][j - arr[i]];
                }
                dp[i][j] = take+not_take;
            }
        }
        return dp[n-1][target];
    }

    int so(int n, int target, vector<int>&arr){
        vector<int>dp(target+1,0);
        dp[0] = 1;
        if(arr[0] <= target)
            dp[arr[0]] = 1;
        if(arr[0] == 0){
            dp[0] = 2;
        }
        for(int i = 1; i<n; i++){
            vector<int>temp(target+1,0);
            for(int j = 0; j<=target; j++){
                int not_take = dp[j];
                int take = 0;
                if(arr[i] <= j){
                    take = dp[j - arr[i]];
                }
                temp[j] = take+not_take;
            }
            dp = temp;
        }
        return dp[target];
    }


    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        if(n == 1){
            if(nums[0] == abs(target))
                return 1;
            return 0;
        }
        int sum = 0;
        for(int i : nums){
            sum += i;
        }
        if(target>sum||target<-sum){
            return 0;
        }
        int diff = sum - target;
        if(diff%2 != 0){
            return 0;
        }
        int tar = diff/2;
        
        // return tabulate(n,tar,nums);
        return so(n,tar,nums);
    }
};
