class Solution {
public:
    int memoize(int i, int j, string &p, string &s, vector<vector<int>>&dp){
        if(i<0 && j<0)
            return true;
        if(i<0 && j>=0){
            return false;
        }
        if(j<0 && i>=0){
            for(int x=0;x<=i;x++){
                if(p[x] != '*')
                    return false;
            }
            return true;
        }
        if(dp[i][j] != -1)
            return dp[i][j];
        if(p[i] == s[j] || p[i] == '?'){
            return dp[i][j] = memoize(i-1,j-1,p,s,dp);
        }
        if(p[i] == '*')
            return dp[i][j] = memoize(i-1,j,p,s,dp) | memoize(i,j-1,p,s,dp);
        return dp[i][j] = false;
    }

    int tabulate(string &s , string &p){
        vector<vector<int>>dp(p.size()+1,vector<int>(s.size()+1,0));
        dp[0][0] = 1;
        for(int i=1;i<=p.size();i++){
            dp[i][0] = 1;
            for(int x=0;x<i;x++)
            {
                if(p[x] != '*')
                    dp[i][0] = 0;
            }
        }
        for(int i=1;i<=p.size();i++){
            for(int j=1;j<=s.size();j++){
                if(p[i-1] == s[j-1] || p[i-1] == '?')
                    dp[i][j] = dp[i-1][j-1];
                else if(p[i-1] == '*')
                    dp[i][j] = dp[i-1][j] | dp[i][j-1];
                else dp[i][j] = 0;
            }
        }
        return dp[p.size()][s.size()];
    }

    int so(string &s , string &p){
        vector<int>dp(s.size()+1,0);
        dp[0] = 1;
        for(int i=1;i<=p.size();i++){
            vector<int>temp(s.size()+1,0);
            temp[0] = 1;
            for(int x=0;x<i;x++)
            {
                if(p[x] != '*'){
                    temp[0] = 0;
                    break;
                }
            }
            for(int j=1;j<=s.size();j++){
                if(p[i-1] == s[j-1] || p[i-1] == '?')
                    temp[j] = dp[j-1];
                else if(p[i-1] == '*')
                    temp[j] = dp[j] | temp[j-1];
                else
                    temp[j] = 0;
            }
            dp = temp;
        }
        return dp[s.size()];
    }
    bool isMatch(string s, string p) {
        //memoize
        // vector<vector<int>>dp(p.size(),vector<int>(s.size(),-1));
        // return memoize(p.size()-1,s.size()-1,p,s,dp);

        //tabulate
        // return tabulate(s,p);

        //space optimization
        return so(s,p);
    }
};
