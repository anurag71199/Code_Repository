class Solution {
public:
    int memoize(int i, int n, int buy, int cap, vector<int>&prices, vector<vector<vector<int>>>&dp){
        if(cap == 0)
            return 0;
        if(i == n)
            return 0;
        if(dp[i][buy][cap] != -1)
            return dp[i][buy][cap];
        int take, not_take;
        //buy
        if(buy == 1){
            take = memoize(i+1,n,0,cap,prices,dp) - prices[i];
            not_take = memoize(i+1,n,1,cap,prices,dp);
        }
        //sell
        else{
            take = memoize(i+1,n,1,cap-1,prices,dp) + prices[i];
            not_take = memoize(i+1,n,0,cap,prices,dp);
        }
        return dp[i][buy][cap] = max(take,not_take);
    }

    int tabulate(vector<int>&prices){
        int n = prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        //all base cases intialize to 0 so skipping
        for(int i = n-1; i>=0; i--){
            for(int buy = 0; buy<2; buy++){
                for(int cap = 2; cap>0; cap--){
                    int take,not_take;
                    if(buy == 1){
                        take = dp[i+1][0][cap] - prices[i];
                        not_take = dp[i+1][1][cap];
                    }
                    //sell
                    else{
                        take = dp[i+1][1][cap-1] + prices[i];
                        not_take = dp[i+1][0][cap];
                    }
                    dp[i][buy][cap] = max(take,not_take);
                }
            }
        }
        return dp[0][1][2];
    }

    int so(vector<int>&prices){
        int n = prices.size();
        vector<vector<int>>dp(2,vector<int>(3,0));
        vector<vector<int>>temp(2,vector<int>(3,0));
        //all base cases intialize to 0 so skipping
        for(int i = n-1; i>=0; i--){
            for(int buy = 0; buy<2; buy++){
                for(int cap = 2; cap>0; cap--){
                    int take,not_take;
                    if(buy == 1){
                        take = dp[0][cap] - prices[i];
                        not_take = dp[1][cap];
                    }
                    //sell
                    else{
                        take = dp[1][cap-1] + prices[i];
                        not_take = dp[0][cap];
                    }
                    temp[buy][cap] = max(take,not_take);
                }
            }
            dp = temp;
        }
        return dp[1][2];
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();

        //memoization
        // vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        // return memoize(0,n,1,2,prices,dp);

        //tabulate
        // return tabulate(prices);

        //space optimization
        return so(prices);
    }
};
