class Solution {
public:
    int memoize(int i, int n, int buy, vector<int>&prices, vector<vector<int>>&dp){
        if(i>=n)
            return 0;
        if(dp[i][buy] != -1)
            return dp[i][buy];
        int take,not_take;
        if(buy == 1){
            take = memoize(i+1,n,0,prices,dp) - prices[i];
            not_take = memoize(i+1,n,1,prices,dp);
        }
        else{
            take = memoize(i+2,n,1,prices,dp) + prices[i];
            not_take = memoize(i+1,n,0,prices,dp);
        }
        return dp[i][buy] = max(take,not_take);
    }

    int tabulate(vector<int>&prices){
        int n = prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        for(int i=n-1;i>=0;i--){
            for(int buy = 0; buy < 2; buy++){
                int take,not_take;
                if(buy == 1){
                    take = dp[i+1][0] - prices[i];
                    not_take = dp[i+1][1];
                }
                else{
                    if(i+2 <= n) take = dp[i+2][1] + prices[i];
                    else take = prices[i];
                    not_take = dp[i+1][0];
                }
                dp[i][buy] = max(take,not_take);
            }
        }
        return dp[0][1];
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        //memoization
        // vector<vector<int>>dp(n,vector<int>(2,-1));
        // return memoize(0,n,1,prices,dp);

        //tabulate
        return tabulate(prices);
    }
};
