#include <bits/stdc++.h> 
int memoize(int i, int n, vector<int>&dp, vector<int>&arr){
    if(i==n)
        return 0;
    if(dp[i] != -1)
        return dp[i];
    int one = memoize(i+1,n,dp,arr) + abs(arr[i+1]-arr[i]);
    int two = INT_MAX;
    if(i<=n)
        two = memoize(i+2,n,dp,arr) + abs(arr[i+2]-arr[i]);
    return dp[i] = min(one,two);
}

int tabular(int n, vector<int>&arr){
    if(arr.size() == 1)
        return 0;
    vector<int>dp(n+1,-1);
    dp[0] = 0;
    dp[1] = abs(arr[1] - arr[0]);
    for(int i=2;i<=n;i++){
        dp[i] = min(dp[i-1] + abs(arr[i] - arr[i-1]), dp[i-2] + abs(arr[i] - arr[i-2]));
    }
    return dp[n];
}

int so(int n, vector<int>&arr){
    if(arr.size() == 1)
        return 0;
    vector<int>dp(n+1,-1);
    int a = 0;
    int b = abs(arr[1] - arr[0]);
    int c;
    for(int i=2;i<=n;i++){
        c = min(b + abs(arr[i] - arr[i-1]), a + abs(arr[i] - arr[i-2]));
        a=b;
        b=c;
    }
    return c;
}

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int>dp(n+1,-1);
    // return memoize(0,n-1,dp,heights);
    // return tabular(n-1,heights);
    return so(n-1,heights);
}
