class Solution {
public:
    int memoize(int i, int prev, int n, vector<int>&nums, vector<vector<int>>&dp){
        if(i == n)
            return 0;
        if(dp[i][prev+1] != -1)
            return dp[i][prev+1];
        int take = INT_MIN, not_take;
        not_take = memoize(i+1,prev,n,nums,dp);
        if(prev == -1 || nums[i] > nums[prev])
            take = 1 + memoize(i+1,i,n,nums,dp);
        return dp[i][prev+1] = max(take,not_take);
    }

    int tabulate(vector<int>&nums){
        int n = nums.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        for(int i = n-1; i>=0; i--){
            for(int prev = n-1; prev>=-1; prev--){
                int take = INT_MIN,not_take;
                not_take = dp[i+1][prev+1];
                if(prev == -1 || nums[i] > nums[prev])
                    take = dp[i+1][i+1] + 1;
                dp[i][prev+1] = max(take,not_take);
            }
        }
        return dp[0][0]; // dp[0][-1+1]
    }
    int so(vector<int>&nums){
        int n = nums.size();
        vector<int>dp(n+1,0);
        vector<int>temp(n+1,0);
        for(int i = n-1; i>=0; i--){
            for(int prev = n-1; prev>=-1; prev--){
                int take = INT_MIN,not_take;
                not_take = dp[prev+1];
                if(prev == -1 || nums[i] > nums[prev])
                    take = dp[i+1] + 1;
                temp[prev+1] = max(take,not_take);
            }
            dp = temp;
        }
        return dp[0]; // dp[0][-1+1]
    }
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();

        //memoization
        // vector<vector<int>>dp(n,vector<int>(n+1,-1));
        // return memoize(0,-1,n,nums,dp);

        //tabulation
        // return tabulate(nums);

        //space optimization
        return so(nums);
    }
};
