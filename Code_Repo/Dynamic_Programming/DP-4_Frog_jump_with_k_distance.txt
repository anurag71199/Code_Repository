class Solution {
  public:
    //memoization
    // int f(int n, int k,vector<int>&dp, vector<int>&arr){
    //     if(n==0){
    //         return 0;
    //     }
    //     if(dp[n] != -1)
    //         return dp[n];
    //     int ans = INT_MAX;
    //     for(int i=1;i<=k;i++){
    //         if(n-i>=0)
    //             ans = min(ans,f(n-i,k,dp,arr)+abs(arr[n-i] - arr[n]));
    //     }
    //     return dp[n] = ans;
    // } 
    
    //tabulation
    int f(int n, int k, vector<int>&arr){
        vector<int>dp(n+1);
        dp[0];
        for(int i=1;i<n;i++){
            int mini = INT_MAX;
            for(int j=1;j<=k;j++){
                if(i-j>=0){
                    mini = min(mini,dp[i-j] + abs(arr[i] - arr[i-j]));
                }
            }
            dp[i] = mini;
        }
        return dp[n-1];
    }
    int minimizeCost(vector<int>& height, int n, int k) {
        // Code here
        // vector<int>dp(n+1,-1);
        // return f(n-1,k,dp,height);
        return f(n,k,height);
    }
};
