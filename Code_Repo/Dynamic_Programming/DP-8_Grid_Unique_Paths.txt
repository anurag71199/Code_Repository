class Solution {
public:
    int memoize(int i, int j, int n, int m,vector<vector<int>>&dp){
        if(i>=n || j>=m)
            return 0;
        if(i==n-1 && j==m-1)
            return 1;
        if(dp[i][j] != -1)
            return dp[i][j];
        int down = memoize(i+1,j,n,m,dp);
        int right = memoize(i,j+1,n,m,dp);
        return dp[i][j] = down + right;

    }
    int tabulation(int n, int m){
        vector<vector<int>>dp(n,vector<int>(m,0));
        dp[n-1][m-1] = 1;
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(i+1<n){
                    dp[i][j] += dp[i+1][j];
                }
                if(j+1<m){
                    dp[i][j] += dp[i][j+1];
                }
            }
        }
        return dp[0][0];
    }
    int so(int n, int m){
        vector<int>dp(m,0);
        dp[m-1] = 1;
        for(int i=n-1;i>=0;i--){
            vector<int>temp(m,0);
            for(int j=m-1;j>=0;j--){
                temp[j] += dp[j];
                if(j+1<m){
                    temp[j] += temp[j+1];
                }
            }
            dp = temp;
        }
        return dp[0];
    }
    int uniquePaths(int m, int n) {
        // vector<vector<int>>dp(m,vector<int>(n,-1));
        // return memoize(0,0,m,n,dp);
        // return tabulation(m,n);
        return so(m,n);
    }
};
