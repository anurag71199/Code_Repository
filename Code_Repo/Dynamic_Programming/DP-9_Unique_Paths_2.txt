class Solution {
public:
    int memoize(int i, int j, int n, int m, vector<vector<int>>&grid,vector<vector<int>>&dp){
        if(i==n || j==m || grid[i][j]==1){
            return 0;
        }
        if(i==n-1 && j==m-1){
            return 1;
        }
        if(dp[i][j] != -1){
                return dp[i][j];
        }
        int down = memoize(i+1,j,n,m,grid,dp);
        int right = memoize(i,j+1,n,m,grid,dp);
        return dp[i][j] = down+right;
    }

    long long tabulate(int n, int m, vector<vector<int>>&grid){
        if(grid[n-1][m-1] == 1)
            return 0;
        vector<vector<long long>>dp(n,vector<long long>(m,0));
        dp[n-1][m-1] = 1;
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(grid[i][j] == 1){
                    continue;
                }
                if(i+1<n){
                    dp[i][j] += dp[i+1][j];
                }
                if(j+1<m){
                    dp[i][j] += dp[i][j+1];
                }
            }
        }
        return dp[0][0];
    }

    long long so(int n, int m, vector<vector<int>>&grid){
        if(grid[n-1][m-1] == 1)
            return 0;
        vector<long long>dp(m,0);
        dp[m-1] = 1;
        for(int i=n-1;i>=0;i--){
            vector<long long>temp(m,0);
            for(int j=m-1;j>=0;j--){
                if(grid[i][j] == 1)
                    continue;
                temp[j] += dp[j];
                if(j+1<m)
                    temp[j] += temp[j+1];
            }
            dp = temp;
        }
        return dp[0];
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        // vector<vector<int>>dp(n,vector<int>(m,-1));
        // return memoize(0,0,n,m,obstacleGrid,dp);
        // return tabulate(n,m,obstacleGrid);
        return so(n,m,obstacleGrid);
    }
};
