int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<pair<int,int>,int>>q;
        vector<vector<int>>visited(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                    visited[i][j] = 1;
                }
            }
        }
        int dcol[] = {0,+1,0,-1}; //up right down left
        int drow[] = {-1,0,+1,0};
        int timer = 0;
        while(!q.empty()){
            int i = q.front().first.first;
            int j = q.front().first.second;
            int tim = q.front().second;
            timer = max(timer,tim);
            q.pop();
            for(int x=0;x<4;x++){
                int it = drow[x] + i;
                int jt = dcol[x] + j;
                if(it<0 || jt<0 || it==n || jt==m || grid[it][jt] != 1 || visited[it][jt] == 1){
                    continue;
                }
                else{
                    visited[it][jt] = 1;
                    q.push({{it,jt},tim+1});
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j] != 1 && grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return timer;
    }
