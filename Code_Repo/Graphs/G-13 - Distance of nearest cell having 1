vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    // Code here
	    int n = grid.size();
	    int m = grid[0].size();
	    vector<vector<int>>ans(n,vector<int>(m,0));
	    vector<vector<int>>visited(n,vector<int>(m,0));
	    queue<pair<pair<int,int>,int>>q;
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            if(grid[i][j]==1){
	                q.push({{i,j},0});
	                ans[i][j] = 0;
	                visited[i][j] = 1;
	            }
	        }
	    }
	    int drow[] = {-1,0,+1,0};
	    int dcol[] = {0,+1,0,-1};
	    while(!q.empty()){
	        int i = q.front().first.first;
	        int j = q.front().first.second;
	        int tim = q.front().second;
	        q.pop();
	        for(int x=0;x<4;x++){
	            int it = i + drow[x];
	            int jt = j + dcol[x];
	            if(it<0 || jt<0 || it==n || jt==m || visited[it][jt] == 1 || grid[it][jt] != 0){
	                continue;
	            }
	            else{
	                visited[it][jt] = 1;
	                ans[it][jt] = tim+1;
	                q.push({{it,jt},tim+1});
	            }
	        }
	    }
	    return ans;
	}
