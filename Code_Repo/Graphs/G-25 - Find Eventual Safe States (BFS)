vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        // code here
        vector<int>newadj[V];
        vector<int>indegree(V,0);
        for(int i=0;i<V;i++){
            for(auto x : adj[i]){
                newadj[x].push_back(i);
                indegree[i]++;
            }
        }
        queue<int>q;
        for(int i=0;i<V;i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        vector<int>safenodes;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            safenodes.push_back(node);
            for(auto i : newadj[node]){
                indegree[i]--;
                if(indegree[i] == 0){
                    q.push(i);
                }
            }
        }
        sort(safenodes.begin(), safenodes.end());
        return safenodes;
    }
