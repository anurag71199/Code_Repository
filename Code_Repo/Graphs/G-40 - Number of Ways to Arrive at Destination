int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>>adj[n];
        int mod = 1e9+7;
        for(int i=0;i<roads.size();i++){
            int u = roads[i][0];
            int v = roads[i][1];
            int t = roads[i][2];
            adj[u].push_back({t,v});
            adj[v].push_back({t,u});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
        vector<int>dist(n,1e9);
        vector<int>ways(n,0);
        ways[0] = 1;
        dist[0] = 0;
        q.push({0,0});
        while(!q.empty()){
            int tim = q.top().first;
            int node = q.top().second;
            q.pop();
            for(auto i : adj[node]){
                if(dist[i.second] > i.first + tim){
                    dist[i.second] = i.first + tim;
                    ways[i.second] += ways[node];
                    q.push({i.first + tim,i.second});
                }
                else if(dist[i.second] == i.first+tim){
                    ways[i.second] += ways[node];
                }
                else{
                    continue;
                }
            }
        }
        return ways[n-1];
    }
