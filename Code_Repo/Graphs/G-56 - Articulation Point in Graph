class Solution {
  int timer = 0;
  public:
    void dfs(vector<int>adj[], int node, int parent, vector<int>&tim, vector<int>&low, vector<int>&visited, set<int>&artnodes){
        visited[node] = 1;
        tim[node] = timer;
        low[node] = timer;
        timer++;
        int child = 0; //logic for counting starting point
        for(auto i : adj[node]){
            if(i == parent){
                continue;
            }
            if(!visited[i]){
                dfs(adj,i,node,tim,low,visited,artnodes);
                low[node] = min(low[node],low[i]);
                if(low[i] >= tim[node] && parent != -1){
                    artnodes.insert(node);
                }
                child++;
            }
            else{
                low[node] = min(low[node],tim[i]);
            }
        }
        if(child > 1 && parent ==-1){
            artnodes.insert(node);
        }
    }
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        vector<int>visited(V,0);
        vector<int>tim(V,0);
        vector<int>low(V,0);
        set<int>artnodes;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(adj,i,-1,tim,low,visited,artnodes);
            }
        }
        vector<int>ans;
        for(auto i : artnodes){
            ans.push_back(i);
        }
        if(ans.size()==0){
            return {-1};
        }
        return ans;
    }
};
