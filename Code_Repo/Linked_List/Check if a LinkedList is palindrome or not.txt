/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode *head){
        ListNode *prev = NULL;
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode *nex = head->next;
        while(nex!=NULL){
            head->next = prev;
            prev = head;
            head = nex;
            nex = nex->next;
        }
        head->next = prev;
        return head;
    }
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return true;
        }
        ListNode *slow = head, *fast = head;
        //find middle if the list and reverse the right nodes of slow
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow->next = rev(slow->next);
        slow = slow->next;
        fast = head;
        while(slow!=NULL){
            if(slow->val != fast->val){
                return false;
            }
            slow = slow->next;
            fast = fast->next;
        }
        return true;

    }
};