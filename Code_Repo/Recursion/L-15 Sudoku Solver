bool validity(int row, int col, vector<vector<char>>&board,char num){
        //row check && col check
        for(int i=0;i<9;i++){
            //row check
            if(board[row][i] == num){
                return false;
            }
            //col check
            if(board[i][col] == num){
                return false;
            }
            //3x3 grid check
            if( board[3*(row/3) + i/3][3*(col/3) + i%3] == num){
                return false;
            }
        }
        return true;
    }
    bool solver(vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j] == '.'){
                    for(char num = '1';num<='9';num++){
                        if(validity(i,j,board,num)==true){
                            board[i][j] = num;
                            if(solver(board) == true){
                                return true;
                            }
                            else
                                board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solver(board);
    }
