void explore(int i, int j, vector<vector<int>>&grid, vector<vector<int>>&visited,vector<string>&ans, string &ds,int n){
        if(i<0 || j<0 || i==n || j==n || grid[i][j] == 0 || visited[i][j] == 1){
            return;
        }
        if(i==n-1 && j==n-1){
            ans.push_back(ds);
            return;
        }
        visited[i][j] = 1;
        //alphabetical order required so D,L,R,U
        
        //down
        ds.push_back('D');
        explore(i+1,j,grid,visited,ans,ds,n);
        ds.pop_back();
        
        //left
        ds.push_back('L');
        explore(i,j-1,grid,visited,ans,ds,n);
        ds.pop_back();
        
        //right
        ds.push_back('R');
        explore(i,j+1,grid,visited,ans,ds,n);
        ds.pop_back();
        
        //up
        ds.push_back('U');
        explore(i-1,j,grid,visited,ans,ds,n);
        ds.pop_back();
        
        visited[i][j] = 0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<int>>visited(n,vector<int>(n,0));
        vector<string>ans;
        string ds = "";
        explore(0,0,m,visited,ans,ds,n);
        return ans;
    }
